<div class="container-fluid">
  
  <div class="page-header">
    <h1>README</h1>      
  </div>
  
  <div class="row content">
    
    <h1><a href="/caesars-cipher">Caesar's Cipher</a> <small>Ruby || TDD with RSpec || Sinatra || HTML/CSS</small></h1>

    <h2>What is this?</h2>
    
    <p>It is simple Sinatra app that I built while while following the curriculum at The Odin Project.</p>
    
    <h2>What does it do?</h2>
    
    <p>A Casar Cipher, or a shift cipher, is a text encryption method that takes some text and replaces each character with a character that is a given distance up or down the alphabet. <code>a</code> becomes <code>b</code>, <code>z</code> becomes <code>a</code>, and <code>Hello, my name is Thomas, thanks for coming!</code> becomes <code>Ifmmp, nz obnf jt Uipnbt, uibolt gps dpnjoh!</code> Thank goodness for this app, because otherwise that last one would have taken some time.</p>
    
    <h2>Abstraction. (...or whatever it's called.)</h2>
    
    <p>The app view contains an html <code>form</code> containg a textarea and dropdown options. The app accepts user input by way of a <code>params hash</code> sent via a <code>GET</code> request to <code>'/'</code> We just gotta store <code>params[:input]</code> and <code>params[:shift_factor]</code> into some variables, and then we can pass them along to the <code>caesar_cipher.rb</code> script that I got to build and write tests for earlier on in the curriculum.<br><br>The previously CLI-only script uses if-else logic to take an input string and a shift integer, check to see if each character is a letter, if it is, it shifts it within the bounds of the 26 letters in our alphabet. The result is rendered in the <code>views/index.erb</code> file, after the <code>GET</code> request has been recieved.</p>
    
    <h2>Where do we go from here?</h2>
    
    <p>I'd love to utilize the conventional <code>POST</code> request, rather than only <code>GET</code>. I'm sure I've just got to be willing to get in there and work some things out. Also, why does it have to be a drop down menu? I should be able to find a way to accept and validate a integer in a text box as input.<br><br>The if-else logic mostly works in the Ruby script, except I'd love to see the use of negative numbers produce 'unencryption' so that I get these results.</p>
    <pre>
    #./lib/caeser_cipher.rb
    c_cipher("Hello", 5) #=> "Mjppt"
    c_cipher("Mjppt", -5) #=> "Hello"
    </pre>
    
    <p>However, I'm having trouble skirting around the ASCII characters surrounding the alphabet.<br><br>Lastly, it's been a while since I've used html, css, and javascript, so I gotta get my hands dirty there again too.</p>
    
    <h2>What did I learn?</h2>
    
    <p>In the Ruby script, I made sure to use an <code>*args</code> hash for passing in parameters, that way some burden is taken off of the caller as the app keeps on growing, and I had fun using <code>CONSTANTS</code> to get rid of the magic numbers I had floating so other developers can help me more easily. Finally, and funnily enough, using the <code>Array#map</code> method was a revelation for me, saving me a few lines of extra code and giving me a more conscise method.<br><br>In the testing, I saved myself from having to constantly write manual tests in the commandline. Even after falling in love with the <code>pry</code> gem and using <code>bindings</code> nothing beats the pleasure of TDD. Hell, I'm still enjoying going back and refactoring, knowing the code is safe.<br><br>Finally, Sinatra has already tightened up some of my understanding of web development. Have just briefly touched on Rails before, it was all magic, now it's magic and a little bit of technique.</p>
      
  </div>
  <div class="row content" id="google">
    <h1><a href="/google">Google</a> <small>HTML || CSS || Google Search API? || DevTools</small></h1>

    <h2>What is this?</h2>
    
    <p>A hardcoded html and css clone of Google's homepage. And it actually works!</p>
    
    <h2>What does it do?</h2>
    
    <p>It's google...</p>
    
    <h2>Abstraction. (...or whatever it's called.)</h2>
    
    <p>I'll be the first to admit that front-end isn't my strong suit. And one may think that of all webpages to try and clone, Google's probably the easiest! That may be true, but this was such a wonderful excercise of attention to detail. Some of the CSS elements required down-to-the-pixel specificty. Take the iconic searchbar for example:</p>
    
    <pre>
      #searchbar input {
      display: block;
      margin: 0 auto;
      padding: 5px 8px 0 6px;
      border: 2px;
      border-style: inset;
      font-size: 18px;
      height: 25px;
      width: 496px;
      }
    </pre>
    
    <p>Of course, this kind of dexterity isn't arbitrary. I had a wonderful introduction to my browser's devtools to inspect html elements and css rules. Also, does it count as an api if I send a <code>q</code> string to <code>https://www.google.com</code>?</p>
    
    <h2>Where do we go from here?</h2>
    
    <p>This project is complete, but more like it are surely to come. Cloning webpages in this was is great practice for frontend skills for me. It wouldn't hurt to go back and refactor this page, however...</p>
    
    <h2>What did I learn?</h2>
    
    <p>HTML, CSS, Devtools, as I've already mentioned. I also learned some softskills too: being patient, precise, and using Google! (pun intended).</p>
    
  </div>
  
  <div class="row content" id="sample-app">
    <h1><a href="https://thomas-sample-app.herokuapp.com/" target="none">Sample App</a> <small>RoR || Bootstrap || SQL || Minitest</small></h1>
    <p>(Opens in new tab)</p>
    
    <h2>What is this?</h2>
    
    <p>This is my progress as I work through the famous Michael Hartl Ruby on Rails Tutorial.</p>
    
    <h2>What does it do?</h2>
    
    <p>It helps me learn Rails! Eventually it will be another clone of the famed social media app.</p>
    
    <h2>Abstraction. (...or whatever it's called.)</h2>
    
    <p>Many many many Rails developers have built this app following this tutorial. I feel as though it's a right of passage. Alongside the suppliments at The Odin Project, I feel as though I will complete this tutorial with a more in-depth appreciation for what I've let myself get into.</p>
    
    <h2>Where do we go from here?</h2>
    
    <p>I keep on learning! Next up: Models. Keep up with my learning by following <a href="https://github.com/Thomascountz/sample_app" target="none">my repository</a> on github!</p>
    
    <h2>What did I learn?</h2>
    
    <p>So far I'm learning minitest from square one, where in the past I've focused exclusively on RSpec. The tutorial begins with looking at the C and V of MVC, and takes care to ensure that each element is tested.</p>    
  </div>
  
  <div class="row content" id="connect-four">
    <h1><a href="https://github.com/Thomascountz/odin_projects/tree/master/connectfour" target="none">Connect Four</a> <small>Ruby || RSpec || Algorithms || OOP</small></h1>
    <p>(opens in new tab)</p>
    
    <h2>What is this?</h2>
    
    <p>A link to a command-line Connect Four game I wrote while going through The Odin Project.</p>
    
    <h2>What does it do?</h2>
    
    <p><a href="https://en.wikipedia.org/wiki/Connect_Four" target="none">Connect Four</a>is a board game for two players. The board has a 6 x 7 where players take turns dropping their colored tokens into the bottom position of each of the seven columns. the first player to get four tokens in a row, either horizontally, vertically, or diagonally, wins! This command-line game is exactly that.</p>
    
    <h2>Abstraction. (...or whatever it's called.)</h2>
    
    <p>Firstly, writing this game really helped to understand OOP and TDD principles. My file tree looks like this:</p>
    
    <pre>
      .
      ├── connect_four.rb
      ├── lib
      │   ├── board.rb
      │   ├── game.rb
      │   └── player.rb
      ├── scrap.rb
      └── spec
          ├── board_spec.rb
          ├── game_spec.rb
          ├── player_spec.rb
          └── spec_helper.rb
    </pre>
    
    <p>As you can probably tell, my focus from early on was with the separation of concerns. Each class was contained with it's own file, and each class had it's own test.<br><br> speaking of tests, this project was my first experience using doubles like this <code>player1 = double('player')</code>. These, again helped me to keep my classes separated so that they can be tested independently.<br><br>The other very fun part of building this game was writing the <code>Board#win?</code>method. I approached this problem a few different way. The first thing to note is that I used a nested array to represent my board:
    
    <pre>
    [['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '.', '.', '.', '.'],
     ['O', '.', '.', '.', '.', '.', '.']]
    </pre>
    
    <p>So therefore, the position where the "O" is located could be identified as <code>Board[5][0]</code> (The first element in the fifth array). When it came time to write a <code>Board#win</code> method, I first approched it recursively. I wanted the method to return true or false by following a "flood-fill" methodology. The idea was that when a token was played, those coodinates would be passed to <code>Board#win?</code>. The base cases are <code>if count == 4</code>, meaning that four tokens were found in sequence, or <code>if !row.between?(0, 5) && !column.between?(0, 6)</code>, meaning that the method was now out of the range of the board.<br><br>If the current position on the board was equal to the token, the method would check each position in each direction to see if there was a matching token, if so, it would move in that direction until either the <code>count == 4</code> or a matching token was not found.<br><br>In theory, this would work, and I'm still excited by the prospect of implementing this algorithm, as I think it is suitable, but instead, I settled on a non-recursive stradegy:</p>
    
    <pre>
    def horizontal_win?(args = {})
      token   = args.fetch(:token, nil)
      row     = args.fetch(:row, nil)
      column  = args.fetch(:column, nil)
  
      count = 0
  
      4.times do |i|
        count += 1 if column + i <= 6 && @play_area[row][column + i] == token
        count += 1 if column - i >= 0 && @play_area[row][column - i] == token
        return true if count == 5
      end
  
      false
    end
    </pre>
    
    <p>Where this was written to check horizontal wins, similar methods were written to check for diagonal and vertical wins. Firstly, this code accepts an <code>args</code> array to take the pressue of the method caller to keep track of so many representational numbers. Secondly, the code iterates four times and simply adds one to <count>count</count> if token in either direction matches the token that was just played.<br><br>I had some wierd edge case errors with the code initially, for example, when <code>column - i</code> would equal a negative number, the method was now testing the end of the array, and if their happened to be a matching token on the opposite side, a win would be returned. Luckily testing helped with this!</p>
    
    <pre>
      it 'returns false' do
        board.instance_variable_set(:@play_area,
                                    [['.', '.', '.', '.', '.', '.', '.'],
                                     ['.', '.', '.', '.', '.', '.', '.'],
                                     ['.', '.', '.', '.', '.', '.', '.'],
                                     ['.', '.', '.', '.', '.', '.', '.'],
                                     ['O', '.', '.', '.', '.', '.', '.'],
                                     ['O', '.', '.', '.', '.', '.', '.']])
        expect(board.win?(token: 'O', row: 4, column: 0)).to be false
      end
    </pre>
    
    <p>This test originally failed.<br><br> Overall, this was one of my favorite projects to work on. From end to end, I felt very confident, and now I'm excited to go back and refactor!</p>
    
    <h2>Where do we go from here?</h2>
    
    <p>Refactoring and playtime! With this code and tests in hand, I can now try to implement a recursive method to check for winning patterns, I can try to implement a <a href="https://chessprogramming.wikispaces.com/Bitboards">bitboard</a>, and I can deploy a frontend so that I can play online with friends!</p>
    
    <h2>What did I learn?</h2>
    
    <p>Well if I haven't gone through it all already, I've learned TDD with RSpec, OOP and separation of concerns, and to have fun trying new things.</p>    
  </div>
  
</div>